"""
SnapMagic Backend - Card Generation Service
Handles AI-powered trading card generation using Amazon Bedrock Nova Canvas
"""

import json
import base64
import boto3
from typing import Dict, Any, Optional
from datetime import datetime
from .BaseService import BaseService

class CardService(BaseService):
    """
    Card generation service using Amazon Bedrock Nova Canvas
    """
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__('CardService')
        self.config = config
        self.bedrock_client = boto3.client('bedrock-runtime', region_name='us-east-1')
        self.model_id = config.get('models', {}).get('novaCanvas', 'amazon.nova-canvas-v1:0')
        
        # Load card template
        self.template_image = self._load_template_image()
        self.template_mask = self._load_template_mask()
        
    def process_request(self, request_data: Dict[str, Any]) -> Dict[str, Any]:
        """Process card generation request"""
        self.log_request('GENERATE_CARD', request_data)
        
        # Validate required fields
        validation_error = self.validate_required_fields(request_data, ['userPrompt'])
        if validation_error:
            return self.create_response(False, error=validation_error)
        
        user_prompt = self.sanitize_input(request_data['userPrompt'], 500)
        template = request_data.get('template', 'cardtemplate')
        
        try:
            # Generate card using Bedrock
            card_data = self._generate_card_with_bedrock(user_prompt, template)
            
            return self.create_response(True, {
                'cardData': card_data,
                'generationTime': card_data.get('generationTime', 0)
            })
            
        except Exception as e:
            self.log_error('GENERATE_CARD', e)
            return self.create_response(False, error=f"Card generation failed: {str(e)}")
    
    def _generate_card_with_bedrock(self, user_prompt: str, template: str) -> Dict[str, Any]:
        """Generate card using Amazon Bedrock Nova Canvas"""
        start_time = datetime.utcnow()
        
        # Create enhanced prompt for card generation
        enhanced_prompt = self._create_enhanced_prompt(user_prompt)
        
        # Prepare Bedrock request
        request_body = {
            "taskType": "INPAINTING",
            "inPaintingParams": {
                "text": enhanced_prompt,
                "image": self.template_image,
                "maskImage": self.template_mask
            },
            "imageGenerationConfig": {
                "numberOfImages": 1,
                "height": 720,
                "width": 1280,
                "cfgScale": 7.0,
                "seed": None
            }
        }
        
        # Call Bedrock
        response = self.bedrock_client.invoke_model(
            modelId=self.model_id,
            body=json.dumps(request_body),
            contentType='application/json'
        )
        
        # Process response
        response_body = json.loads(response['body'].read())
        
        if 'images' not in response_body or not response_body['images']:
            raise Exception("No images generated by Bedrock")
        
        # Get generated image
        generated_image = response_body['images'][0]
        
        # Calculate generation time
        generation_time = (datetime.utcnow() - start_time).total_seconds()
        
        # Create card data
        card_data = {
            'id': self._generate_card_id(),
            'imageBase64': f"data:image/png;base64,{generated_image}",
            'prompt': user_prompt,
            'template': template,
            'timestamp': datetime.utcnow().isoformat() + 'Z',
            'generationTime': generation_time
        }
        
        self.logger.info(f"âœ… Card generated successfully in {generation_time:.2f}s")
        
        return card_data
    
    def _create_enhanced_prompt(self, user_prompt: str) -> str:
        """Create enhanced prompt for better card generation"""
        event_name = self.config.get('cardTemplate', {}).get('eventName', 'AWS Event')
        
        enhanced_prompt = f"""
        Professional trading card character illustration for {event_name}.
        
        Character: {user_prompt}
        
        Style: High-quality digital art, professional trading card aesthetic, vibrant colors, 
        detailed character design, fantasy/sci-fi elements, dynamic pose, confident expression.
        
        Technical: Sharp focus, high resolution, detailed textures, professional lighting,
        suitable for trading card format.
        
        Avoid: Text, logos, watermarks, blurry details, low quality.
        """
        
        return enhanced_prompt.strip()
    
    def _load_template_image(self) -> str:
        """Load card template image as base64"""
        try:
            # In production, load from S3 or local file
            # For now, return placeholder
            return ""  # Will be loaded from actual template file
        except Exception as e:
            self.logger.warning(f"Failed to load template image: {e}")
            return ""
    
    def _load_template_mask(self) -> str:
        """Load template mask image as base64"""
        try:
            # In production, load from S3 or local file
            # For now, return placeholder
            return ""  # Will be loaded from actual mask file
        except Exception as e:
            self.logger.warning(f"Failed to load template mask: {e}")
            return ""
    
    def _generate_card_id(self) -> str:
        """Generate unique card ID"""
        timestamp = int(datetime.utcnow().timestamp())
        return f"card_{timestamp}_{hash(str(timestamp)) % 10000:04d}"
