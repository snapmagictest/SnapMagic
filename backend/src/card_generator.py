"""
SnapMagic Trading Card Generator
Uses exact coordinate masking for perfect content replacement
"""

import json
import logging
import boto3
import base64
import os
from typing import Dict, Any, Optional

logger = logging.getLogger()

class SnapMagicCardGenerator:
    """Trading card generator using exact coordinate masking"""
    
    def __init__(self, region: str = "us-east-1"):
        self.region = region
        self.bedrock_runtime = boto3.client('bedrock-runtime', region_name=region)
        
        # Load template and mask files
        self.template_path = os.path.join(os.path.dirname(__file__), 'finalpink.png')
        self.mask_path = os.path.join(os.path.dirname(__file__), 'exact_mask.png')
        
        logger.info("ðŸŽ´ SnapMagic Card Generator initialized")
    
    def load_template_and_mask(self) -> tuple[str, str]:
        """Load template and mask as base64 strings"""
        try:
            # Load template
            with open(self.template_path, "rb") as f:
                template_base64 = base64.b64encode(f.read()).decode('utf8')
            
            # Load mask
            with open(self.mask_path, "rb") as f:
                mask_base64 = base64.b64encode(f.read()).decode('utf8')
            
            logger.info("âœ… Template and mask loaded successfully")
            return template_base64, mask_base64
            
        except Exception as e:
            logger.error(f"Failed to load template/mask: {e}")
            raise Exception(f"Template loading failed: {e}")
    
    def generate_trading_card(self, prompt: str) -> Dict[str, Any]:
        """
        Generate trading card with content in exact coordinates (69,78) to (618,570)
        
        Args:
            prompt: Text description of content to place in card
            
        Returns:
            Dict with success status and result data
        """
        try:
            logger.info(f"ðŸŽ¯ Generating card with prompt: {prompt}")
            
            # Load template and mask
            template_base64, mask_base64 = self.load_template_and_mask()
            
            # Prepare Nova Canvas request
            body = json.dumps({
                "taskType": "INPAINTING",
                "inPaintingParams": {
                    "text": prompt,
                    "negativeText": "pink, magenta, placeholder, low quality, blurry, artifacts",
                    "image": template_base64,
                    "maskImage": mask_base64  # Exact coordinate mask
                },
                "imageGenerationConfig": {
                    "numberOfImages": 1,
                    "quality": "premium",  # Higher quality
                    "cfgScale": 8.0,       # Better prompt following
                    "seed": 42             # Consistent results
                }
            })
            
            # Call Nova Canvas
            logger.info("ðŸŽ¨ Calling Nova Canvas for card generation...")
            response = self.bedrock_runtime.invoke_model(
                modelId="amazon.nova-canvas-v1:0", 
                body=body
            )
            
            # Parse response
            result = json.loads(response['body'].read().decode('utf-8'))
            
            if 'images' in result and result['images']:
                image_base64 = result['images'][0]
                logger.info("âœ… Card generated successfully")
                
                return {
                    'success': True,
                    'image_base64': image_base64,
                    'prompt_used': prompt,
                    'coordinates': '(69,78) to (618,570)',
                    'method': 'exact_coordinate_masking'
                }
            else:
                logger.error("No images in Nova Canvas response")
                return {
                    'success': False,
                    'error': 'No images generated by Nova Canvas'
                }
                
        except Exception as e:
            logger.error(f"Card generation failed: {str(e)}")
            return {
                'success': False,
                'error': f"Generation failed: {str(e)}"
            }
    
    def validate_prompt(self, prompt: str) -> tuple[bool, Optional[str]]:
        """Validate prompt for card generation"""
        if not prompt or not prompt.strip():
            return False, "Prompt cannot be empty"
        
        if len(prompt.strip()) < 10:
            return False, "Prompt must be at least 10 characters"
        
        if len(prompt) > 1023:
            return False, "Prompt must be less than 1023 characters"
        
        return True, None
